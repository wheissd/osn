{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Social Network API",
		"description": "Collection for testing Social Network API endpoints.\n\nThis collection includes requests for:\n- User registration\n- Authentication\n- User profile retrieval\n- Health checks\n\nMake sure to run requests in order for proper authentication flow.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status).to.eql('ok');",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API server is running and healthy"
			},
			"response": [
				{
					"name": "Successful Health Check",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"health"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"ok\",\n    \"timestamp\": 1701234567890\n}"
				}
			]
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user_id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user_id');",
							"    pm.expect(jsonData.user_id).to.be.a('string');",
							"    pm.expect(jsonData.user_id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
							"    ",
							"    // Save user_id for subsequent requests",
							"    pm.environment.set('user_id', jsonData.user_id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Иван\",\n    \"second_name\": \"Иванов\",\n    \"birthdate\": \"1990-01-15\",\n    \"biography\": \"Разработчик программного обеспечения из Москвы. Увлекаюсь программированием и современными технологиями.\",\n    \"city\": \"Москва\",\n    \"password\": \"secure_password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/user/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"register"
					]
				},
				"description": "Register a new user in the system"
			},
			"response": [
				{
					"name": "Successful Registration",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Иван\",\n    \"second_name\": \"Иванов\",\n    \"birthdate\": \"1990-01-15\",\n    \"biography\": \"Разработчик программного обеспечения\",\n    \"city\": \"Москва\",\n    \"password\": \"secure_password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"user_id\": \"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58\"\n}"
				}
			]
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"    pm.expect(jsonData.token).to.be.a('string');",
							"    pm.expect(jsonData.token).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
							"    ",
							"    // Save token for authenticated requests",
							"    pm.environment.set('auth_token', jsonData.token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{user_id}}\",\n    \"password\": \"secure_password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Authenticate user and get access token"
			},
			"response": [
				{
					"name": "Successful Login",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58\",\n    \"password\": \"secure_password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\"\n}"
				},
				{
					"name": "Invalid Credentials",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58\",\n    \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User not found or invalid credentials\",\n    \"request_id\": \"abc-123\",\n    \"code\": 404\n}"
				}
			]
		},
		{
			"name": "Get User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('first_name');",
							"    pm.expect(jsonData).to.have.property('second_name');",
							"    pm.expect(jsonData).to.have.property('birthdate');",
							"    pm.expect(jsonData).to.have.property('city');",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('user_id'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/get/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"get",
						"{{user_id}}"
					]
				},
				"description": "Get user profile by user ID"
			},
			"response": [
				{
					"name": "Successful Get User",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user/get/e4d2e6b0-cde2-42c5-aac3-0b8316f21e58",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"get",
								"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58\",\n    \"first_name\": \"Иван\",\n    \"second_name\": \"Иванов\",\n    \"birthdate\": \"1990-01-15\",\n    \"biography\": \"Разработчик программного обеспечения из Москвы. Увлекаюсь программированием и современными технологиями.\",\n    \"city\": \"Москва\"\n}"
				},
				{
					"name": "User Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user/get/00000000-0000-0000-0000-000000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"get",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User not found\",\n    \"request_id\": \"xyz-456\",\n    \"code\": 404\n}"
				}
			]
		},
		{
			"name": "Register User - Invalid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData.code).to.eql(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"\",\n    \"second_name\": \"Test\",\n    \"birthdate\": \"invalid-date\",\n    \"city\": \"Test City\",\n    \"password\": \"123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/user/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"register"
					]
				},
				"description": "Test registration with invalid data to verify validation"
			},
			"response": []
		},
		{
			"name": "Login - Wrong Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData.code).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{user_id}}\",\n    \"password\": \"wrong_password\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Test login with wrong password"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
